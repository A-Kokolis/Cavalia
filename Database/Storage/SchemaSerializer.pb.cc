// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SchemaSerializer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SchemaSerializer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SchemaSerializer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaSerializer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaSerializer_Schema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaSerializer_Schema_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SchemaSerializer_Schema_ValueType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SchemaSerializer_Key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaSerializer_Key_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SchemaSerializer_2eproto() {
  protobuf_AddDesc_SchemaSerializer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SchemaSerializer.proto");
  GOOGLE_CHECK(file != NULL);
  SchemaSerializer_descriptor_ = file->message_type(0);
  static const int SchemaSerializer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaSerializer, schemas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaSerializer, primary_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaSerializer, secondary_keys_),
  };
  SchemaSerializer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaSerializer_descriptor_,
      SchemaSerializer::default_instance_,
      SchemaSerializer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaSerializer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaSerializer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaSerializer));
  SchemaSerializer_Schema_descriptor_ = SchemaSerializer_descriptor_->nested_type(0);
  static const int SchemaSerializer_Schema_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaSerializer_Schema, field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaSerializer_Schema, field_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaSerializer_Schema, field_size_),
  };
  SchemaSerializer_Schema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaSerializer_Schema_descriptor_,
      SchemaSerializer_Schema::default_instance_,
      SchemaSerializer_Schema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaSerializer_Schema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaSerializer_Schema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaSerializer_Schema));
  SchemaSerializer_Schema_ValueType_descriptor_ = SchemaSerializer_Schema_descriptor_->enum_type(0);
  SchemaSerializer_Key_descriptor_ = SchemaSerializer_descriptor_->nested_type(1);
  static const int SchemaSerializer_Key_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaSerializer_Key, fields_),
  };
  SchemaSerializer_Key_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SchemaSerializer_Key_descriptor_,
      SchemaSerializer_Key::default_instance_,
      SchemaSerializer_Key_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaSerializer_Key, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaSerializer_Key, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SchemaSerializer_Key));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SchemaSerializer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaSerializer_descriptor_, &SchemaSerializer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaSerializer_Schema_descriptor_, &SchemaSerializer_Schema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SchemaSerializer_Key_descriptor_, &SchemaSerializer_Key::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SchemaSerializer_2eproto() {
  delete SchemaSerializer::default_instance_;
  delete SchemaSerializer_reflection_;
  delete SchemaSerializer_Schema::default_instance_;
  delete SchemaSerializer_Schema_reflection_;
  delete SchemaSerializer_Key::default_instance_;
  delete SchemaSerializer_Key_reflection_;
}

void protobuf_AddDesc_SchemaSerializer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026SchemaSerializer.proto\"\377\002\n\020SchemaSeria"
    "lizer\022)\n\007schemas\030\001 \003(\0132\030.SchemaSerialize"
    "r.Schema\022*\n\013primary_key\030\002 \001(\0132\025.SchemaSe"
    "rializer.Key\022-\n\016secondary_keys\030\003 \003(\0132\025.S"
    "chemaSerializer.Key\032\315\001\n\006Schema\022\022\n\nfield_"
    "name\030\001 \002(\t\0226\n\nfield_type\030\002 \002(\0162\".SchemaS"
    "erializer.Schema.ValueType\022\022\n\nfield_size"
    "\030\003 \001(\005\"c\n\tValueType\022\007\n\003INT\020\000\022\010\n\004INT8\020\001\022\t"
    "\n\005INT16\020\002\022\t\n\005INT32\020\003\022\t\n\005INT64\020\004\022\n\n\006DOUBL"
    "E\020\005\022\t\n\005FLOAT\020\006\022\013\n\007VARCHAR\020\007\032\025\n\003Key\022\016\n\006fi"
    "elds\030\001 \003(\005", 410);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SchemaSerializer.proto", &protobuf_RegisterTypes);
  SchemaSerializer::default_instance_ = new SchemaSerializer();
  SchemaSerializer_Schema::default_instance_ = new SchemaSerializer_Schema();
  SchemaSerializer_Key::default_instance_ = new SchemaSerializer_Key();
  SchemaSerializer::default_instance_->InitAsDefaultInstance();
  SchemaSerializer_Schema::default_instance_->InitAsDefaultInstance();
  SchemaSerializer_Key::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SchemaSerializer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SchemaSerializer_2eproto {
  StaticDescriptorInitializer_SchemaSerializer_2eproto() {
    protobuf_AddDesc_SchemaSerializer_2eproto();
  }
} static_descriptor_initializer_SchemaSerializer_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SchemaSerializer_Schema_ValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaSerializer_Schema_ValueType_descriptor_;
}
bool SchemaSerializer_Schema_ValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SchemaSerializer_Schema_ValueType SchemaSerializer_Schema::INT;
const SchemaSerializer_Schema_ValueType SchemaSerializer_Schema::INT8;
const SchemaSerializer_Schema_ValueType SchemaSerializer_Schema::INT16;
const SchemaSerializer_Schema_ValueType SchemaSerializer_Schema::INT32;
const SchemaSerializer_Schema_ValueType SchemaSerializer_Schema::INT64;
const SchemaSerializer_Schema_ValueType SchemaSerializer_Schema::DOUBLE;
const SchemaSerializer_Schema_ValueType SchemaSerializer_Schema::FLOAT;
const SchemaSerializer_Schema_ValueType SchemaSerializer_Schema::VARCHAR;
const SchemaSerializer_Schema_ValueType SchemaSerializer_Schema::ValueType_MIN;
const SchemaSerializer_Schema_ValueType SchemaSerializer_Schema::ValueType_MAX;
const int SchemaSerializer_Schema::ValueType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SchemaSerializer_Schema::kFieldNameFieldNumber;
const int SchemaSerializer_Schema::kFieldTypeFieldNumber;
const int SchemaSerializer_Schema::kFieldSizeFieldNumber;
#endif  // !_MSC_VER

SchemaSerializer_Schema::SchemaSerializer_Schema()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaSerializer_Schema::InitAsDefaultInstance() {
}

SchemaSerializer_Schema::SchemaSerializer_Schema(const SchemaSerializer_Schema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaSerializer_Schema::SharedCtor() {
  _cached_size_ = 0;
  field_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  field_type_ = 0;
  field_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaSerializer_Schema::~SchemaSerializer_Schema() {
  SharedDtor();
}

void SchemaSerializer_Schema::SharedDtor() {
  if (field_name_ != &::google::protobuf::internal::kEmptyString) {
    delete field_name_;
  }
  if (this != default_instance_) {
  }
}

void SchemaSerializer_Schema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaSerializer_Schema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaSerializer_Schema_descriptor_;
}

const SchemaSerializer_Schema& SchemaSerializer_Schema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SchemaSerializer_2eproto();
  return *default_instance_;
}

SchemaSerializer_Schema* SchemaSerializer_Schema::default_instance_ = NULL;

SchemaSerializer_Schema* SchemaSerializer_Schema::New() const {
  return new SchemaSerializer_Schema;
}

void SchemaSerializer_Schema::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field_name()) {
      if (field_name_ != &::google::protobuf::internal::kEmptyString) {
        field_name_->clear();
      }
    }
    field_type_ = 0;
    field_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaSerializer_Schema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string field_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_name().data(), this->field_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_field_type;
        break;
      }

      // required .SchemaSerializer.Schema.ValueType field_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SchemaSerializer_Schema_ValueType_IsValid(value)) {
            set_field_type(static_cast< ::SchemaSerializer_Schema_ValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_field_size;
        break;
      }

      // optional int32 field_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_size_)));
          set_has_field_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaSerializer_Schema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string field_name = 1;
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field_name(), output);
  }

  // required .SchemaSerializer.Schema.ValueType field_type = 2;
  if (has_field_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->field_type(), output);
  }

  // optional int32 field_size = 3;
  if (has_field_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->field_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaSerializer_Schema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string field_name = 1;
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_name().data(), this->field_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field_name(), target);
  }

  // required .SchemaSerializer.Schema.ValueType field_type = 2;
  if (has_field_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->field_type(), target);
  }

  // optional int32 field_size = 3;
  if (has_field_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->field_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaSerializer_Schema::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string field_name = 1;
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_name());
    }

    // required .SchemaSerializer.Schema.ValueType field_type = 2;
    if (has_field_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->field_type());
    }

    // optional int32 field_size = 3;
    if (has_field_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->field_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaSerializer_Schema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaSerializer_Schema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaSerializer_Schema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaSerializer_Schema::MergeFrom(const SchemaSerializer_Schema& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_name()) {
      set_field_name(from.field_name());
    }
    if (from.has_field_type()) {
      set_field_type(from.field_type());
    }
    if (from.has_field_size()) {
      set_field_size(from.field_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaSerializer_Schema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaSerializer_Schema::CopyFrom(const SchemaSerializer_Schema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaSerializer_Schema::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SchemaSerializer_Schema::Swap(SchemaSerializer_Schema* other) {
  if (other != this) {
    std::swap(field_name_, other->field_name_);
    std::swap(field_type_, other->field_type_);
    std::swap(field_size_, other->field_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaSerializer_Schema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaSerializer_Schema_descriptor_;
  metadata.reflection = SchemaSerializer_Schema_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SchemaSerializer_Key::kFieldsFieldNumber;
#endif  // !_MSC_VER

SchemaSerializer_Key::SchemaSerializer_Key()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaSerializer_Key::InitAsDefaultInstance() {
}

SchemaSerializer_Key::SchemaSerializer_Key(const SchemaSerializer_Key& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaSerializer_Key::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaSerializer_Key::~SchemaSerializer_Key() {
  SharedDtor();
}

void SchemaSerializer_Key::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaSerializer_Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaSerializer_Key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaSerializer_Key_descriptor_;
}

const SchemaSerializer_Key& SchemaSerializer_Key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SchemaSerializer_2eproto();
  return *default_instance_;
}

SchemaSerializer_Key* SchemaSerializer_Key::default_instance_ = NULL;

SchemaSerializer_Key* SchemaSerializer_Key::New() const {
  return new SchemaSerializer_Key;
}

void SchemaSerializer_Key::Clear() {
  fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaSerializer_Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_fields())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fields())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fields;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaSerializer_Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 fields = 1;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->fields(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaSerializer_Key::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 fields = 1;
  for (int i = 0; i < this->fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->fields(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaSerializer_Key::ByteSize() const {
  int total_size = 0;

  // repeated int32 fields = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fields_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fields(i));
    }
    total_size += 1 * this->fields_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaSerializer_Key::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaSerializer_Key* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaSerializer_Key*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaSerializer_Key::MergeFrom(const SchemaSerializer_Key& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaSerializer_Key::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaSerializer_Key::CopyFrom(const SchemaSerializer_Key& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaSerializer_Key::IsInitialized() const {

  return true;
}

void SchemaSerializer_Key::Swap(SchemaSerializer_Key* other) {
  if (other != this) {
    fields_.Swap(&other->fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaSerializer_Key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaSerializer_Key_descriptor_;
  metadata.reflection = SchemaSerializer_Key_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SchemaSerializer::kSchemasFieldNumber;
const int SchemaSerializer::kPrimaryKeyFieldNumber;
const int SchemaSerializer::kSecondaryKeysFieldNumber;
#endif  // !_MSC_VER

SchemaSerializer::SchemaSerializer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SchemaSerializer::InitAsDefaultInstance() {
  primary_key_ = const_cast< ::SchemaSerializer_Key*>(&::SchemaSerializer_Key::default_instance());
}

SchemaSerializer::SchemaSerializer(const SchemaSerializer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SchemaSerializer::SharedCtor() {
  _cached_size_ = 0;
  primary_key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaSerializer::~SchemaSerializer() {
  SharedDtor();
}

void SchemaSerializer::SharedDtor() {
  if (this != default_instance_) {
    delete primary_key_;
  }
}

void SchemaSerializer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaSerializer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaSerializer_descriptor_;
}

const SchemaSerializer& SchemaSerializer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SchemaSerializer_2eproto();
  return *default_instance_;
}

SchemaSerializer* SchemaSerializer::default_instance_ = NULL;

SchemaSerializer* SchemaSerializer::New() const {
  return new SchemaSerializer;
}

void SchemaSerializer::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_primary_key()) {
      if (primary_key_ != NULL) primary_key_->::SchemaSerializer_Key::Clear();
    }
  }
  schemas_.Clear();
  secondary_keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SchemaSerializer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SchemaSerializer.Schema schemas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schemas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_schemas;
        if (input->ExpectTag(18)) goto parse_primary_key;
        break;
      }

      // optional .SchemaSerializer.Key primary_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_primary_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_primary_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_secondary_keys;
        break;
      }

      // repeated .SchemaSerializer.Key secondary_keys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secondary_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_secondary_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_secondary_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SchemaSerializer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SchemaSerializer.Schema schemas = 1;
  for (int i = 0; i < this->schemas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->schemas(i), output);
  }

  // optional .SchemaSerializer.Key primary_key = 2;
  if (has_primary_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->primary_key(), output);
  }

  // repeated .SchemaSerializer.Key secondary_keys = 3;
  for (int i = 0; i < this->secondary_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->secondary_keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SchemaSerializer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SchemaSerializer.Schema schemas = 1;
  for (int i = 0; i < this->schemas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->schemas(i), target);
  }

  // optional .SchemaSerializer.Key primary_key = 2;
  if (has_primary_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->primary_key(), target);
  }

  // repeated .SchemaSerializer.Key secondary_keys = 3;
  for (int i = 0; i < this->secondary_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->secondary_keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SchemaSerializer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .SchemaSerializer.Key primary_key = 2;
    if (has_primary_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->primary_key());
    }

  }
  // repeated .SchemaSerializer.Schema schemas = 1;
  total_size += 1 * this->schemas_size();
  for (int i = 0; i < this->schemas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->schemas(i));
  }

  // repeated .SchemaSerializer.Key secondary_keys = 3;
  total_size += 1 * this->secondary_keys_size();
  for (int i = 0; i < this->secondary_keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->secondary_keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaSerializer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SchemaSerializer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SchemaSerializer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaSerializer::MergeFrom(const SchemaSerializer& from) {
  GOOGLE_CHECK_NE(&from, this);
  schemas_.MergeFrom(from.schemas_);
  secondary_keys_.MergeFrom(from.secondary_keys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_primary_key()) {
      mutable_primary_key()->::SchemaSerializer_Key::MergeFrom(from.primary_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SchemaSerializer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaSerializer::CopyFrom(const SchemaSerializer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaSerializer::IsInitialized() const {

  for (int i = 0; i < schemas_size(); i++) {
    if (!this->schemas(i).IsInitialized()) return false;
  }
  return true;
}

void SchemaSerializer::Swap(SchemaSerializer* other) {
  if (other != this) {
    schemas_.Swap(&other->schemas_);
    std::swap(primary_key_, other->primary_key_);
    secondary_keys_.Swap(&other->secondary_keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SchemaSerializer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaSerializer_descriptor_;
  metadata.reflection = SchemaSerializer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
